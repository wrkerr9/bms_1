			"""
			cellGroups = []
			cellStringNumber = int(r[1],16)
			firstCellNumber = int(r[2],16)
			sizeOfGroup = int(r[3],16)
			individualCellModuleBalancingRate = int(r[4],16)*100/255
			cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellModuleBalancingRate])
			for x in range(sizeOfGroup):
				response = self.ser.readline()
				assert crc8(response[:2]) == int(response[-2:]) # crc check
				r = response.split(',')
				assert r[0] == "BB2"
				cellStringNumber = int(r[1],16)
				firstCellNumber = int(r[2],16)
				sizeOfGroup = int(r[3],16)
				individualCellModuleBalancingRate = int(r[4],16)*100/255
				cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellModuleBalancingRate])
			return cellGroups
			"""
			
			"""
			cellGroups = []
			cellStringNumber = int(r[1],16)
			firstCellNumber = int(r[2],16)
			limit = int(r[3],16)
			sizeOfGroup = limit
			individualCellModuleTemperatures = int(r[4,16]-100)
			cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellModuleTemperatures])
			for i in range(limit-1):
				response = self.ser.readline()
				assert crc8(response[:2]) == int(response[-2:]) # crc check
				r = response.split(',')
				assert r[0] == "BT2"
				cellStringNumber = int(r[1],16)
				firstCellNumber = int(r[2],16)
				limit = int(r[3],16)
				sizeOfGroup = limit
				individualCellModuleTemperatures = int(r[4,16]-100)
				cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellModuleTemperatures])
			return cellGroups
			"""
			"""
			cellGroups = []
			cellStringNumber = int(r[1],16)
			firstCellNumber = int(r[2],16)
			limit = int(r[3],16)
			sizeOfGroup = limit
			individualCellTemperatures = int(r[4,16]-100)
			cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellTemperatures])
			for i in range(limit-1):
				response = self.ser.readline()
				assert crc8(response[:2]) == int(response[-2:]) # crc check
				r = response.split(',')
				assert r[0] == "BT2"
				cellStringNumber = int(r[1],16)
				firstCellNumber = int(r[2],16)
				limit = int(r[3],16)
				sizeOfGroup = limit
				individualCellTemperatures = int(r[4,16]-100)
				cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellTemperatures])
			return cellGroups
			"""
			# cellGroups = []
			# cellStringNumber = int(r[1],16)
			# firstCellNumber = int(r[2],16)
			# limit = int(r[3],16) #we read this many lines.
			# sizeOfGroup = limit
			# individualCellVoltages = int(r[4,16]+200)*0.01
			# cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellVoltages])
			# for i in range(limit-1):
				# response = self.ser.readline()
				# assert crc8(response[:2]) == int(response[-2:]) # crc check
				# r = response.split(',')
				# assert r[0] == "BT2"
				# cellStringNumber = int(r[1],16)
				# firstCellNumber = int(r[2],16)
				# limit = int(r[3],16)
				# sizeOfGroup = limit
				# individualCellVoltages = int(r[4,16]+200)*0.01
				# cellGroups.append([cellStringNumber,firstCellNumber,sizeOfGroup,individualCellVoltages])
			# return cellGroups
			
					"""
		CAN_cell_groups = []
		
		for i in range(3,67,2):
			number_of_cells = int(r[i],16)
			status = CAN_current_dict(int(r[i+1],16))
			
			CAN_cell_groups.append([number_of_cells,status])
		return CAN_current_sensor_status,CAN_cell_groups
		"""
		
			"""
		records = []
		import time 
		for i in range(1,10,2):
			timestamp =  int(r[i],16)+ self.y2kInEpoch
			timeStruct = time.gmtime(timestamp)
			resetSourceFlags = int(r[i+1],16)
			x = resetSourceFlags
			POWER_ON_RESET = True if x & 0x1 else False
			EXTERNAL_RESET = True if x & 0x2 else False
			BROWN_OUT_RESET = True if x & 0x4 else False
			WATCHDOG_RESET = True if x & 0x8 else False
			JTAG_REST = True if x & 0x10 else False
			STACK_OVERFLOW_RESET = True if x & 0x20 else False
			USER_CAUSED_RESET = True if x & 0x40 else False
			records.append(timestamp, [POWER_ON_RESET,EXTERNAL_RESET,BROWN_OUT_RESET,WATCHDOG_RESET,JTAG_REST,STACK_OVERFLOW_RESET,USER_CAUSED_RESET])
		return records
		"""
		#find all the errors using the dictionaries above.
		charging_stage = chargingStageDict[int(r[1],16)]
		last_charging_error = chargingErrorDict[int(r[2],16)]
		last_charging_error_parameter = int(r[3],16)
		stage_duration = int(r[4],16) # in seconds.
		
		status_bitfield = int(r[5],16)
		cell_voltages_v,cell_module_temperature_v,cell_balancing_rates_v,number_of_live_cells_v,cell_temperatures_v = (0x1) & status_bitfield, (0x1 << 1) & status_bitfield,(0x1 << 2) & status_bitfield,(0x1 << 3) & status_bitfield,(0x1 << 4) & status_bitfield,(0x1 << 5) & status_bitfield
	
		
		protection_bitfield = int(r[6],16)
		undervoltage,overvoltage,discharge_overcurrent,charge_overcurrent,cell_module_overheat,leakage,no_cell_comm,cell_overheat = (0x1) & protection_bitfield, (0x1 << 1) & protection_bitfield,(0x1 << 2) & protection_bitfield,(0x1 << 3) & protection_bitfield,(0x1 << 4) & protection_bitfield,(0x1 << 5) & protection_bitfield,(0x1 << 6) & protection_bitfield,(0x1 << 11) & protection_bitfield
		
		power_bitfield = int(r[7],16)
		low_voltage,high_current,high_cell_module, high_cell_temperature = (0x1) & power_bitfield,(0x1 << 1) & power_bitfield,(0x1 << 2) & power_bitfield,(0x1 << 5) & power_bitfield
		
		pin_bitfield = int(r[8],16)
		no_function,speed_sensor,fast_charge_switch,ign_key,charger_mains_AC_sense, heater_enable,sound_buzzer,battery_low,charging_indication,charger_enable_output,state_of_charge,battery_contactor,battery_fan,current_sensor,leakage_sensor,power_reduction,charging_interlock, analog_charger_control, ZVU_boost_charge,ZVU_slow_charge,ZVU_buffer_mode,BMS_failure,equalization_enable,DCDC_control,ESM_rectifier_current_limit,contactor_precharge = (0x1) & pin_bitfield,(0x1 << 1) & pin_bitfield,(0x1 << 2) & pin_bitfield,(0x1 << 3) & pin_bitfield,(0x1 << 4) &	pin_bitfield,(0x1 << 5) & pin_bitfield,(0x1 << 6) & pin_bitfield,(0x1 << 7) & pin_bitfield,(0x1 << 8) & pin_bitfield,(0x1 << 9) & pin_bitfield,(0x1 << 10) & pin_bitfield,(0x1 << 11) & pin_bitfield,(0x1 << 12) & pin_bitfield,(0x1 << 13) & pin_bitfield,(0x1 << 14) & pin_bitfield,(0x1 << 15) & pin_bitfield,(0x1 << 16) & pin_bitfield,(0x1 << 17) & pin_bitfield,(0x1 << 18) & pin_bitfield,(0x1 << 19) & pin_bitfield,(0x1 << 20) & pin_bitfield,(0x1 << 21) & pin_bitfield,(0x1 << 22) & pin_bitfield,(0x1 << 23) & pin_bitfield,(0x1 << 24) & pin_bitfield,(0x1 << 25) & pin_bitfield,(0x1 << 26) & pin_bitfield
		return [charging_stage, last_charging_error, last_charging_error_parameter,stage_duration
		
		[cell_voltages_v,cell_module_temperature_v,cell_balancing_rates_v,number_of_live_cells_v,cell_temperatures_v ],
		[undervoltage,overvoltage,discharge_overcurrent,charge_overcurrent,cell_module_overheat,leakage,no_cell_comm,cell_overheat],
		[no_function,speed_sensor,fast_charge_switch,ign_key,charger_mains_AC_sense, heater_enable,sound_buzzer,battery_low,charging_indication,charger_enable_output,state_of_charge,battery_contactor,battery_fan,current_sensor,leakage_sensor,power_reduction,charging_interlock, analog_charger_control, ZVU_boost_charge,ZVU_slow_charge,ZVU_buffer_mode,BMS_failure,equalization_enable,DCDC_control,ESM_rectifier_current_limit,contactor_precharge ]
		]